import java.io.File;

import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;

import edu.duke.DirectoryResource;
import edu.duke.FileResource;
// String temp = row.get("TemperatureF");
//int value = Integer.parseInt(temp);	
public class Part2 {
	public static void testColdestHourInFile(){
		FileResource fr = new FileResource();
		CSVParser parser = fr.getCSVParser();
		CSVRecord coldest = coldestHourInFile(parser);
		System.out.println("coldest is at "+coldest.get("TimeEST")+" "+coldest.get("TemperatureF"));
	}
	
	public static CSVRecord coldestHourInFile(CSVParser parser){
		CSVRecord coldestSoFar = null;
		
		for(CSVRecord currtRow:parser){
			if(coldestSoFar == null){
				coldestSoFar = currtRow;
			}
			else{
				double currtT = Double.parseDouble(currtRow.get("TemperatureF"));
				double coldestT = Double.parseDouble(coldestSoFar.get("TemperatureF"));
				if(currtT <= coldestT){
					coldestSoFar = currtRow;
				}
			}
		}
			return coldestSoFar;
	}	
	public static void testFileWithColdestTemperature(){
		File target = fileWithColdestTemperaturekkk();
		FileResource fr = new FileResource(target);
		System.out.println("Coldest day was in file "+target.getName());
		
		CSVParser parser = fr.getCSVParser();
		CSVRecord ccc = coldestHourInFile(parser);
		System.out.print("the day is " + ccc.get("DateUTC"));
		System.out.println("Coldest temperature on that day was "+ ccc.get("TemperatureF"));
		CSVParser ppp = fr.getCSVParser();
		for(CSVRecord record:ppp){
			System.out.println(record.get("DateUTC")+" "+record.get("TimeEST")+" "+ record.get("TemperatureF"));
		}
	}
	
	
	public static File fileWithColdestTemperaturekkk(){
		File target = null;
		CSVRecord coldestSoFar = null;
		DirectoryResource dr = new DirectoryResource();
		for(File f:dr.selectedFiles()){
			FileResource fr = new FileResource(f);
			CSVRecord currtColdest = coldestHourInFile(fr.getCSVParser());
			if(coldestSoFar == null){
				coldestSoFar = currtColdest;
				target = f;
			}else{
				double currtT = Double.parseDouble(currtColdest.get("TemperatureF"));
				double coldestT = Double.parseDouble(coldestSoFar.get("TemperatureF"));
				if(currtT <= coldestT){
					coldestSoFar = currtColdest;
					target = f;
				}
				
			}
			
		}
		return target;
	}
	public static CSVRecord fileWithColdestTemperature(){
		CSVRecord coldestSoFar = null;
		DirectoryResource dr = new DirectoryResource();
		for(File f:dr.selectedFiles()){
			FileResource fr = new FileResource(f);
			CSVRecord currtColdest = coldestHourInFile(fr.getCSVParser());
			if(coldestSoFar == null){
				coldestSoFar = currtColdest;
			}else{
				double currtT = Double.parseDouble(currtColdest.get("TemperatureF"));
				double coldestT = Double.parseDouble(coldestSoFar.get("TemperatureF"));
				if(currtT <= coldestT){
					coldestSoFar = currtColdest;
				}
				
			}
			
		}
		return coldestSoFar;
	}
	
	public static CSVRecord lowestHumidityInFile(CSVParser parser){
		CSVRecord lowestH = null;
		for(CSVRecord currtH:parser){
			String str = currtH.get("Humidity");
			if(lowestH == null&& !str.equals("N/A") ){
				lowestH = currtH;
			}else{
				if(!currtH.get("Humidity").equals("N/A")&&!lowestH.get("Humidity").equals("N/A")){
				double currtHumidity = Double.parseDouble(currtH.get("Humidity"));
				double lowestHumidity = Double.parseDouble(lowestH.get("Humidity"));
					if(currtHumidity <= lowestHumidity){
						lowestH = currtH;
					}
				}else{
					continue;
				}		
			}
		}
		return lowestH;
	}
	public static void testLowestHumidityInFile(){
		FileResource fr = new FileResource();
		CSVParser parser = fr.getCSVParser();
		CSVRecord csv = lowestHumidityInFile(parser);
		System.out.println("Lowest Humidity was "+csv.get("Humidity")+" at "+csv.get("DateUTC")+csv.get("TimeEST"));
	}
	
	
	public static void main(String args[]){
//		testColdestHourInFile();
//		testFileWithColdestTemperature();
		testLowestHumidityInFile();
	}
}
