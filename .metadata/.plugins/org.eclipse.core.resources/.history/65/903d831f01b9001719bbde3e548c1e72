package week5;


/**
 * Write a description of class MarkovRunner here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */

import edu.duke.*;

public class MarkovRunner {
    public void runModel(IMarkovModel markov, String text, int size){ 
        markov.setTraining(text); 
        System.out.println("running with " + markov); 
        for(int k=0; k < 3; k++){ 
            String st = markov.getRandomText(size); 
            printOut(st); 
        } 
    } 

    public void runModel(IMarkovModel markov, String text, int size, int seed){ 
        markov.setTraining(text); 
        markov.setRandom(seed);
        System.out.println("running with " + markov); 
        for(int k=0; k < 3; k++){ 
            String st = markov.getRandomText(size); 
//            printOut(st); 
        } 
    } 

    public void runMarkov() { 
        FileResource fr = new FileResource(); 
        String st = fr.asString(); 
        st = st.replace('\n', ' '); 
        MarkovWord markovWord1 = new MarkovWord(3); 
        runModel(markovWord1, st, 200,621); 
    } 

    public void testHashMap(){
//    	 FileResource fr = new FileResource(); 
//         String st = fr.asString(); 
//         st = st.replace('\n', ' '); 
//    	String st = "this is a test yes this is really a test";
        String st = "this is a test yes this is really a test yes a test this is wow"; 
    	EfficientMarkovWord emw = new EfficientMarkovWord(2);
         runModel(emw,st,50,42);
         emw.printHashMapInfo();
    }
    
    public void compareMethods() {
    	 FileResource fr = new FileResource();
         String st = fr.asString();
         st = st.replace('\n', ' ');
    	EfficientMarkovWord emw = new EfficientMarkovWord(2);
    	 double current = System.nanoTime();
         runModel(emw, st, 100,42);
         double end = System.nanoTime();
         double time1 = end - current;
    	MarkovWord mw = new MarkovWord(2);
    	 double current1 = System.nanoTime();
         runModel(mw, st, 100,42);
         double end1 = System.nanoTime();
         double time2 = end1 - current1;
         System.out.println("time1: "+time1+" time2: "+time2);
    }
    
    
    private void printOut(String s){
        String[] words = s.split("\\s+");
        int psize = 0;
        System.out.println("----------------------------------");
        for(int k=0; k < words.length; k++){
            System.out.print(words[k]+ " ");
            psize += words[k].length() + 1;
            if (psize > 60) {
                System.out.println(); 
                psize = 0;
            } 
        } 
        System.out.println("\n----------------------------------");
    } 

    public static void main(String args[]){
    	MarkovRunner mr = new MarkovRunner();
    	mr.runMarkov();
//    	mr.testHashMap();
//    	mr.compareMethods();
    }

}
