package week2;


/**
 * Write a description of class QuakeSortInPlace here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */

import java.util.*;
import edu.duke.*;

public class QuakeSortInPlace {
    public QuakeSortInPlace() {
        // TODO Auto-generated constructor stub
    }
   
    public int getSmallestMagnitude(ArrayList<QuakeEntry> quakes, int from) {
        int minIdx = from;
        for (int i=from+1; i< quakes.size(); i++) {
            if (quakes.get(i).getMagnitude() < quakes.get(minIdx).getMagnitude()) {
                minIdx = i;
            }
        }
        return minIdx;
    }
    
    public void sortByMagnitude(ArrayList<QuakeEntry> in) {
       
       for (int i=0; i< in.size(); i++) {
            int minIdx = getSmallestMagnitude(in,i);
            QuakeEntry qi = in.get(i);
            QuakeEntry qmin = in.get(minIdx);
            in.set(i,qmin);
            in.set(minIdx,qi);
        }
        
    }

    public int getLargestDepth(ArrayList<QuakeEntry> quakeData, int from){
    	int maxIdx = from;
    	for(int i = from + 1; i < quakeData.size(); i++){
    		if(quakeData.get(i).getDepth() < quakeData.get(maxIdx).getDepth()){
    			maxIdx = i;
    		}
    	}
    	return maxIdx;
    }
    public void sortByLargestDepth(ArrayList<QuakeEntry> in){
    	for(int i = 0; i < in.size(); i++){
    		int maxIdx = getLargestDepth(in,i);
    		QuakeEntry qi = in.get(i);
    		QuakeEntry qmin = in.get(maxIdx);
    		in.set(i,qmin);
    		in.set(maxIdx,qi);
    	}
    }
    
    public void onePassBubbleSort(ArrayList<QuakeEntry> quakeData, int numSorted) {
    	int prev = 0;
    	for(int i = 1; i < quakeData.size() - numSorted; i++){
    		if(quakeData.get(i).getMagnitude() < quakeData.get(prev).getMagnitude()){
    			QuakeEntry currtQ = quakeData.get(i);
    			QuakeEntry prevQ = quakeData.get(prev);
    			quakeData.set(i,prevQ);
    			quakeData.set(prev,currtQ);
    		}
    		prev = i; 
    	}
    	System.out.println("第"+numSorted+"次:");
    	for(QuakeEntry qe: quakeData){
    		System.out.println(qe);
    	}
    }
    
    public void sortByMagnitudeWithBubbleSort(ArrayList<QuakeEntry> in) {
    	int N = in.size();
    	for(int j = 0; j < in.size(); j++){
    		System.out.println(in.get(j));
    	}
    	for(int i = 0; i < N - 1; i++){
    		onePassBubbleSort(in,i);
    	}
    }
    
    public boolean checkInSortedOrder(ArrayList<QuakeEntry> quakes){
    	int prev = 0;
    	for(int i = 1; i < quakes.size(); i++){
    		if(quakes.get(i).getMagnitude() < quakes.get(prev).getMagnitude()){
    			return false;
    		}
    		prev = i;
    	}
    	return true;
    }
    
    public void sortByMagnitudeWithBubbleSortWithCheck(ArrayList<QuakeEntry> in){
    	int N = in.size();
    	for(int i = 0; i < N - 1; i++){
    		if(!checkInSortedOrder(in)){
    			onePassBubbleSort(in,i);
    		}
    	}
    }
    
    public void sortByMagnitudeWithCheck(ArrayList<QuakeEntry> in){
    	int i;
    	for(i = 0; i < in.size(); i ++){
    		if(!checkInSortedOrder(in)){
        		int minIdx = getSmallestMagnitude(in, i);
        		QuakeEntry qi = in.get(i);
                QuakeEntry qmin = in.get(minIdx);
                in.set(i,qmin);
                in.set(minIdx,qi);
    		}else{
    			break;
    		}
    	}
    	System.out.println(i);
    }
    
    public void testSort() {
        EarthQuakeParser parser = new EarthQuakeParser(); 
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "/Users/Gz/Desktop/eclipse/duke4/earthquakeDataSampleSix2.atom.txt";
        //String source = "data/nov20quakedata.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);  
       
        System.out.println("read data for "+list.size()+" quakes");    
//        sortByMagnitude(list);
//        for (QuakeEntry qe: list) { 
//            System.out.println(qe);
//        } 
//        sortByLargestDepth(list);
//        for (QuakeEntry qe: list) { 
//            System.out.println(qe);
//        } 
//        sortByMagnitudeWithBubbleSort(list);
//        sortByMagnitudeWithBubbleSortWithCheck(list);
        sortByMagnitudeWithCheck(list);
        System.out.println("排序完毕:");
        for (QuakeEntry qe: list) { 
          System.out.println(qe);
      } 
    }

    
    public void createCSV() {
        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "data/nov20quakedata.atom";
        String source = "data/nov20quakedatasmall.atom";
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        dumpCSV(list);
        System.out.println("# quakes read: " + list.size());
    }
    
    public void dumpCSV(ArrayList<QuakeEntry> list) {
		System.out.println("Latitude,Longitude,Magnitude,Info");
		for(QuakeEntry qe : list){
			System.out.printf("%4.2f,%4.2f,%4.2f,%s\n",
			                  qe.getLocation().getLatitude(),
			                  qe.getLocation().getLongitude(),
			                  qe.getMagnitude(),
			                  qe.getInfo());
	    }
		
	}

    public static void main(String[] args){
    	QuakeSortInPlace qsip = new QuakeSortInPlace();
    	qsip.testSort();
    }

}
