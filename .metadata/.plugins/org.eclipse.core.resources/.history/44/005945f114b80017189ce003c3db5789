package week1;

import java.util.*;
import edu.duke.*;

public class EarthQuakeClient2 {
    public EarthQuakeClient2() {
        // TODO Auto-generated constructor stub
    }

    public ArrayList<QuakeEntry> filter(ArrayList<QuakeEntry> quakeData, Filter f) { 
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        for(QuakeEntry qe : quakeData) { 
            if (f.satisfies(qe)) { 
                answer.add(qe); 
            } 
        }   
        return answer;
    } 
    public ArrayList<QuakeEntry> filter(ArrayList<QuakeEntry> quakeData, Filter f1, Filter f2) { 
        ArrayList<QuakeEntry> answerbefore = new ArrayList<QuakeEntry>();
        ArrayList<QuakeEntry> answer = new ArrayList<QuakeEntry>();
        for(QuakeEntry qe : quakeData) { 
            if (f1.satisfies(qe)) { 
                answerbefore.add(qe); 
            } 
        }
        for(QuakeEntry qe: answerbefore){
        	if(f2.satisfies(qe)){
        		answer.add(qe);
        	}
        }
        return answer;
    } 

    public void quakesWithFilter() { 
        EarthQuakeParser parser = new EarthQuakeParser(); 
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        String source = "/Users/Gz/Desktop/eclipse/duke4/nov20quakedatasmall.atom.txt";
        ArrayList<QuakeEntry> list  = parser.read(source);         
        System.out.println("read data for "+list.size()+" quakes");
        Location Japan = new Location(35.42,139.43);
        Filter f1 = new MagnitudeFilter(4.0,5.0); 
        Filter f2 = new DepthFilter(-35000.0,-12000.0);
        Filter f3 = new DistanceFilter(Japan, 10000*1000);
        Filter f4 = new PhraseFilter("end","Japan");
        ArrayList<QuakeEntry> m7  = filter(list, f1); 
//        ArrayList<QuakeEntry> ans = filter(m7,f2);
        ArrayList<QuakeEntry> ans = filter(list,f3,f4);
        
        
        
        
        for (QuakeEntry qe: ans) { 
            System.out.println(qe);
        } 
        System.out.println("There are total "+ans.size()+" meet with criteria.");
    }

    public void testMatchAllFilter(){
    	 EarthQuakeParser parser = new EarthQuakeParser(); 
    	 String source = "/Users/Gz/Desktop/eclipse/duke4/nov20quakedatasmall.atom.txt";
    	 ArrayList<QuakeEntry> list  = parser.read(source);         
         System.out.println("read data for "+list.size()+" quakes");
         MatchAllFilter maf = new MatchAllFilter();
         Filter f1 = new MagnitudeFilter(0.0,2.0);
         Filter f2 = new DepthFilter(-100000.0,-10000.0);
         Filter f3 = new PhraseFilter("any","a");
         maf.addFilter(f1);
         maf.addFilter(f2);
         maf.addFilter(f3);
         ArrayList<QuakeEntry> ans = filter(list,maf);
         for (QuakeEntry qe: ans) { 
             System.out.println(qe);
         } 
         System.out.println("There are total "+ans.size()+" meet with criteria.");
    	 String str = maf.getName();
    	 System.out.println("Used Filters are "+str);
    
    }
    
    public void testMatchAllFilter2(){
    	EarthQuakeParser parser = new EarthQuakeParser(); 
   	 	String source = "/Users/Gz/Desktop/eclipse/duke4/nov20quakedatasmall.atom.txt";
   	 	ArrayList<QuakeEntry> list  = parser.read(source);         
   	 	System.out.println("read data for "+list.size()+" quakes");
   	 	Location Okl = new Location(36.1314,-95.9372);
   	 	MatchAllFilter maf = new MatchAllFilter();
   	 	Filter f1 = new MagnitudeFilter(0.0,3.0);
   	 	Filter f2 = new DistanceFilter(Okl,10000*1000);
     	Filter f3 = new PhraseFilter("any","Ca");
     	maf.addFilter(f1);
     	maf.addFilter(f2);
     	maf.addFilter(f3);
     	ArrayList<QuakeEntry> ans = filter(list,maf);
     	for (QuakeEntry qe: ans) { 
     		System.out.println(qe);
     	} 
     	System.out.println("There are total "+ans.size()+" meet with criteria.");	 
    }
    
    
    
    
    public void createCSV() {
        EarthQuakeParser parser = new EarthQuakeParser();
        //String source = "../data/nov20quakedata.atom";
        String source = "data/nov20quakedatasmall.atom";
        //String source = "http://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_week.atom";
        ArrayList<QuakeEntry> list  = parser.read(source);
        dumpCSV(list);
        System.out.println("# quakes read: "+list.size());
    }

    public void dumpCSV(ArrayList<QuakeEntry> list) {
        System.out.println("Latitude,Longitude,Magnitude,Info");
        for(QuakeEntry qe : list){
            System.out.printf("%4.2f,%4.2f,%4.2f,%s\n",
                qe.getLocation().getLatitude(),
                qe.getLocation().getLongitude(),
                qe.getMagnitude(),
                qe.getInfo());
        }
    }
    
    public static void main(String args[]){
    	EarthQuakeClient2 eqc2 = new EarthQuakeClient2();
//    	eqc2.quakesWithFilter();
    	eqc2.testMatchAllFilter();
    }

}
