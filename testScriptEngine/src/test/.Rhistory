MFmetapop <- function(t,y,parms) {
C = parms[1] # colonization coefficient
ct = infij%*%y # colonizations from occupied patches
dy= -y + C*(1-y)*ct
return(list(dy))
}
require(deSolve)
npatch <- 12 # number of patches
maxarea <- 4 #largest patch size
coords <- matrix(runif(npatch*2),npatch,2) # random patch locations
areas <- runif(npatch,1,maxarea) # patch areas
#sort patches by area
e=order(areas)
coords=coords[e,]
areas=areas[e]
graphics.off()
dev.new()
plot(coords[,1],coords[,2],cex=2*areas)
for(j in 1:12) {
text(coords[j,1],coords[j,2],as.character(j),cex=areas[j]/2)
}
tdij <- matrix(0,npatch,npatch) # distance between patches i and j
for(i in 1:npatch) {
for(j in 1:npatch) {
vij=coords[i,]-coords[j,] # difference between row i and row j
vij2=sum(vij^2) # sum the squared x and y differences
tdij[i,j]=sqrt(vij2) # take square root to get distance
}
}
#shrink or expand distance matrix--IMPORTANT STEP
#default is scale = 1
scale <- 1
dij <- tdij*scale
#set up the dispersal kernels to make sure they're doing what we want...
dvals <- seq(0,5,by=0.1);
zc <- 2*dcauchy(dvals) #factor 2 to account for negative range of fn, which exp lacks
ze <- dexp(dvals)
zn <- 2*dnorm(dvals) #factor 2 to account for negative range of fn, which exp lacks
matplot(dvals, cbind(ze,zc,zn),pch=c("e","c","n"),xlab="Distance",ylab="Dispersal kernel")
kfun <- function(x) 2*dcauchy(x) # Cauchy kernel default params
infij = matrix(0,npatch,npatch) #fill a blank matrix with zeros
for(i in 1:npatch) {
for(j in 1:npatch) {
infij[i,j]=areas[i]*areas[j]*kfun(dij[i,j])
}
}
diag(infij) <- 0 # no self-to-self colonizations
# function for the model
MFmetapop <- function(t,y,parms) {
C = parms[1]; # colonization coefficient
ct = infij%*%y; # colonizations from occupied patches
dy= -y + C*(1-y)*ct
return(list(dy))
}
# Solve the model. Start with few patches occupied.
y0=rep(0.05,npatch)
out=ode(y0,times=seq(0, 20, by=0.2),MFmetapop,parms=0.2)
# open a graph window for model output
dev.new()
#plot results
plot.new()
par(mfcol=c(3,2))
#this sets up a graphics window that is expecting to plot 3 rows and 2 panels of graphs
#filling first column of panels before it goes on to the next
matplot(out[,1],out[,-1],type="l",lty=1,xlab="Time",ylab="Probability of being occupied",
main = "Doubled Cauchy, default params, random, scale=1")
plot(1:npatch,out[nrow(out),-1],xlab="Patch number (small to large)",
ylab="Final P(occupied)")
# For each patch, compute minimum distance to another patch
dij[dij==0]<-NA # change zeros on diagonal to NA for by-row calculations
mind <- apply(dij,1,min,na.rm=TRUE);
plot(mind, out[nrow(out),-1], xlab="Minimum Distance to next patch",
ylab="Final P(occupied)")
# Do it again with a different dispersal kernel
#substitue dnorm in for dcauchy
kfun <- function(x) 2*dnorm(x) # Doubled Gaussian with default params
infij = matrix(0,npatch,npatch)
for(i in 1:npatch) {
for(j in 1:npatch) {
infij[i,j]=areas[i]*areas[j]*kfun(dij[i,j]);
}
}
diag(infij) <- 0
#solve
y0=rep(0.05,npatch)
out2=ode(y0,times=seq(0,20,by=0.2), MFmetapop,parms=0.2)
#plot
matplot(out2[,1],out2[,-1],type="l",lty=1,xlab="Time",ylab="Probability of being occupied",
main="Doubled Gaussian, default params, random, scale=1")
plot(1:npatch,out2[nrow(out2),-1],xlab="Patch number (small to large)",ylab="Final P(occupied)")
plot(mind, out2[nrow(out2),-1],xlab="Minimum Distance to next patch",ylab="Final P(occupied)")
